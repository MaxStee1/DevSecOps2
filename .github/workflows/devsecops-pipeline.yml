name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. An√°lisis de c√≥digo est√°tico
  static-analysis:
    name: üîç An√°lisis Est√°tico
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: ESLint Security
        run: npm run lint:security

      - name: TypeScript Check
        run: npm run type-check

      - name: Prettier Check
        run: npm run format:check

  # 2. An√°lisis de vulnerabilidades
  security-scan:
    name: üõ°Ô∏è Escaneo de Seguridad
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 3. Tests unitarios y de integraci√≥n
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar tests unitarios
        run: npm run test

      - name: Ejecutar tests de integraci√≥n
        run: npm run test:integration

      - name: Generar reporte de cobertura
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  # 4. Build y escaneo de contenedor
  build-and-scan:
    name: üê≥ Build & Scan Container
    runs-on: ubuntu-latest
    needs: [static-analysis, security-scan, test]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 5. DAST (Dynamic Application Security Testing)
  dast-scan:
    name: üï∑Ô∏è DAST Scan
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run app
        run: |
          docker build -t miapp-segura .
          docker run -d -p 3000:3000 --name test-app miapp-segura
          sleep 30

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Stop test app
        run: docker stop test-app

  # 6. Deploy (solo en main)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build-and-scan, dast-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Aqu√≠ ir√≠an los comandos de deploy real
